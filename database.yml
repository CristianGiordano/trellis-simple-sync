---
- name: Sync {{ site }} DATABASE between development <-> {{ env }} environments
  hosts: "{{ env }}:development:&web"
  remote_user: "{{ web_user }}"

  vars:
    project: "{{ wordpress_sites[site] }}"
    project_current: "{{ www_root }}/{{ site }}/current"
    project_local_path: "{{ (lookup('env', 'USER') == 'vagrant') | ternary(project_current, project.local_path) }}"
    sync_file: "db-sync.sql"
    backup_file: "db-backup-{{ ansible_date_time.iso8601_basic_short }}.sql"
    dev_host: "{{ groups['development'] | first }}"
    domain_dev: "{{ hostvars[dev_host].wordpress_sites[site].site_hosts.0.canonical }}"
    domain_env: "{{ project.site_hosts.0.canonical }}"
    url_dev: "{{ hostvars[dev_host].wordpress_sites[site].ssl.enabled | ternary('https', 'http') }}://{{ domain_dev }}"
    url_env: "{{ project.ssl.enabled | ternary('https', 'http') }}://{{ domain_env }}"
    skip_guids_option: "--skip-columns=guid"
    skip_guids_column: "{{ skip_guids | default('false') }}"
    # ssh_command: 'vagrant ssh -- cd "{{ project_current }}" &&'
    ssh_command: 'trellis vm shell --'
    wpcli_command: "wp --skip-plugins --skip-themes"
    wpcli_elementor: "wp --skip-themes elementor"

  tasks:
    - name: Abort if environment variable is equal to development
      fail:
        msg: "ERROR: development is not a valid environment for this mode (you can't push/pull from development to development)."
      when: env == "development"

    - name: Modify GUID columns
      set_fact:
        skip_guids_option: ""
      when: "skip_guids_column == 'false'"

    - name: PULL database
      block:
        - name: PULL > Export {{ env }} database
          shell: "{{ wpcli_command }} db export - | gzip > {{ sync_file }}.gz"
          args:
            chdir: "{{ project_current }}"
          when: "env in group_names"

        - name: PULL > Pull dump file from {{ env }} to development
          run_once: yes
          fetch:
            src: "{{ project_current }}/{{ sync_file }}.gz"
            dest: "{{ project_local_path }}/"
            flat: yes
          when: "env in group_names"

        - name: PULL > Delete dump file from {{ env }}
          file:
            state: absent
            path: "{{ project_current }}/{{ sync_file }}.gz"
          when: "env in group_names"

        - name: PULL > Backup development database
          shell:
            cmd: "{{ wpcli_command }} db export - | gzip > {{ backup_file }}.gz"
            chdir: "{{ project_current }}"
          when: "'development' in group_names"

        - name: PULL > Reset development database
          shell:
            cmd: "{{ wpcli_command }} db reset --yes"
            chdir: "{{ project_current }}"
          when: "'development' in group_names"

        - name: PULL > Import database dump on development
          shell:
            cmd: "zcat {{ sync_file }}.gz | {{ wpcli_command }} db import -"
            chdir: "{{ project_current }}"
          when: "'development' in group_names"

        - name: PULL > Delete dump file on development
          file:
            state: absent
            path: "{{ project_local_path }}/{{ sync_file }}"
          when: "'development' in group_names"

        - name: PULL > Replace urls "{{ url_env }}" => "{{ url_dev }}" on development
          shell: 
            cmd: '{{ wpcli_command }} search-replace "{{ url_env }}" "{{ url_dev }}" {{ skip_guids_option }} --all-tables'
            chdir: "{{ project_current }}"
          when: "'development' in group_names"

        - name: PULL > Replace protocol-relative urls "//{{ domain_env }}" => "//{{ domain_dev }}" on development
          shell: 
            cmd: '{{ wpcli_command }} search-replace "//{{ domain_env }}" "//{{ domain_dev }}" {{ skip_guids_option }} --all-tables'
            chdir: "{{ project_current }}"
          when: "'development' in group_names"

        - name: PULL > Replace emails "@{{ domain_env }}" => "@{{ domain_dev }}" on development
          shell: 
            cmd: '{{ wpcli_command }} search-replace "@{{ domain_env }}" "@{{ domain_dev }}" --all-tables'
            chdir: "{{ project_current }}"
          when: "'development' in group_names"

        - name: PULL > Replace Elementor urls "{{ url_env }}" => "{{ url_dev }}" on development
          shell: 
            cmd: '{{ wpcli_command }} cli has-command "elementor replace_urls" && {{ wpcli_elementor }} replace_urls "{{ url_env }}" "{{ url_dev }}" || true'
            chdir: "{{ project_current }}"
          when: "'development' in group_names"

        - name: PULL > Cache flush on development
          shell: 
            cmd: "{{ wpcli_command }} cache flush"
            chdir: "{{ project_current }}"
          when: "'development' in group_names"

        - name: PULL > Elementor flush CSS on development
          shell: 
            cmd: '{{ wpcli_command }} cli has-command "elementor flush_css" && {{ wpcli_elementor }} flush_css || true'
            chdir: "{{ project_current }}"
          when: "'development' in group_names"
      when: mode is not defined or mode == "pull"

    - name: PUSH database
      block:
        - name: PUSH > Export development database
          shell: "{{ wpcli_command }} db export - | gzip > {{ sync_file }}.gz"
          args:
            chdir: "{{ project_current }}"
          when: "'development' in group_names"

        - name: PUSH > Push dump file from development to {{ env }}
          run_once: yes
          fetch:
            src: "{{ project_local_path }}/{{ sync_file }}.gz"
            dest: "{{ project_current }}/"
            flat: yes
          when: "'development' in group_names"
    
        - name: PUSH > Delete dump file from development
          file:
            state: absent
            path: "{{ project_local_path }}/{{ sync_file }}.gz"
          when: "'development' in group_names"

        - name: PUSH > Backup {{ env }} database
          shell:
            cmd: "{{ wpcli_command }} db export - | gzip > {{ backup_file }}.gz"
            chdir: "{{ project_current }}"
          when: "env in group_names"

        - name: PUSH > Reset {{ env }} database
          shell:
            cmd: "{{ wpcli_command }} db reset --yes"
            chdir: "{{ project_current }}"
          when: "env in group_names"

        - name: PUSH > Import database dump on {{ env }}
          shell:
            cmd: "zcat {{ sync_file }}.gz | {{ wpcli_command }} db import -"
            chdir: "{{ project_current }}"
          when: "env in group_names"

        - name: PULL > Delete dump file on {{ env }}
          file:
            state: absent
            path: "{{ project_local_path }}/{{ sync_file }}"
          when: "env in group_names"

        - name: PULL > Replace urls "{{ url_env }}" => "{{ url_dev }}" on {{ env }}
          shell: 
            cmd: '{{ wpcli_command }} search-replace "{{ url_env }}" "{{ url_dev }}" {{ skip_guids_option }} --all-tables'
            chdir: "{{ project_current }}"
          when: "env in group_names"

        - name: PULL > Replace protocol-relative urls "//{{ domain_env }}" => "//{{ domain_dev }}" on {{ env }}
          shell: 
            cmd: '{{ wpcli_command }} search-replace "//{{ domain_env }}" "//{{ domain_dev }}" {{ skip_guids_option }} --all-tables'
            chdir: "{{ project_current }}"
          when: "env in group_names"

        - name: PULL > Replace emails "@{{ domain_env }}" => "@{{ domain_dev }}" on {{ env }}
          shell: 
            cmd: '{{ wpcli_command }} search-replace "@{{ domain_env }}" "@{{ domain_dev }}" --all-tables'
            chdir: "{{ project_current }}"
          when: "env in group_names"

        - name: PULL > Replace Elementor urls "{{ url_env }}" => "{{ url_dev }}" on {{ env }}
          shell: 
            cmd: '{{ wpcli_command }} cli has-command "elementor replace_urls" && {{ wpcli_elementor }} replace_urls "{{ url_env }}" "{{ url_dev }}" || true'
            chdir: "{{ project_current }}"
          when: "env in group_names"

        - name: PULL > Cache flush on {{ env }}
          shell: 
            cmd: "{{ wpcli_command }} cache flush"
            chdir: "{{ project_current }}"
          when: "env in group_names"

        - name: PULL > Elementor flush CSS on {{ env }}
          shell: 
            cmd: '{{ wpcli_command }} cli has-command "elementor flush_css" && {{ wpcli_elementor }} flush_css || true'
            chdir: "{{ project_current }}"
          when: "env in group_names"
      when: mode is defined and mode == "push"
